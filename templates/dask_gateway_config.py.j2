c.DaskGateway.backend_class = (
    "dask_gateway_server.backends.jobqueue.slurm.SlurmBackend"
)

c.JobQueueBackend.dask_gateway_jobqueue_launcher = "{{ miniforge.home }}/envs/{{ dask_gateway.environment }}/bin/dask-gateway-jobqueue-launcher"
c.JobQueueClusterConfig.scheduler_cmd = "{{ miniforge.home }}/envs/{{ jupyterhub.lab_environment }}/bin/dask-scheduler"
c.JobQueueClusterConfig.worker_cmd = "{{ miniforge.home }}/envs/{{ jupyterhub.lab_environment }}/bin/dask-worker"


c.Proxy.address = ':{{ dask_gateway.api_port }}'
c.Proxy.tcp_address = ':{{ dask_gateway.tcp_port }}'

# Authentication
c.DaskGateway.authenticator_class = "dask_gateway_server.auth.JupyterHubAuthenticator"
c.JupyterHubAuthenticator.jupyterhub_api_token = "{{ jupyterhub.services.dask_gateway }}"
c.JupyterHubAuthenticator.jupyterhub_api_url = "http://localhost:{{ jupyterhub.port }}/hub/api"

# dask_gateway configuration
from dask_gateway_server.options import Options, Integer, Float, Select

def options_handler(options):
    return {
        "worker_cores": options.worker_cores,
        "worker_memory": int(options.worker_memory * 2 ** 30),
        "scheduler_cores": options.scheduler_cores,
        "scheduler_memory": int(options.scheduler_memory * 2 ** 30),
        "parition": options.parition
    }

c.Backend.cluster_options = Options(
    Integer("worker_cores", default=1, min=1, max=4, label="Worker Cores"),
    Float("worker_memory", default=1, min=1, max=8, label="Worker Memory (GiB)"),
    Integer("scheduler_cores", default=1, min=1, max=2, label="Scheduler Cores"),
    Float("scheduler_memory", default=1, min=1, max=4, label="Scheduler Memory (GiB)"),
    Select("partition", ['general',
{%- for item in groups -%}
{%- if item.startswith('partition-')-%}'{{ item[10:] }}', {% endif -%}
{%- endfor -%}], default="general", label="Slurm Partition"),
    handler=options_handler,
)                


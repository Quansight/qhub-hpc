##
## This file is maintained by Ansible - ALL MODIFICATIONS WILL BE REVERTED
## https://jupyterhub.readthedocs.io/en/stable/getting-started/config-basics.html
##

from jupyterhub_traefik_proxy import TraefikTomlProxy
from batchspawner import SlurmSpawner

# Don't kill servers when JupyterHub restarts
c.JupyterHub.cleanup_servers = False

# We run traefik under JupyterHub. Makes things simpler in this case
c.JupyterHub.proxy_class = TraefikTomlProxy

# Turn sessions off - we don't use them, since we pass through to slurm
c.PAMAuthenticator.open_sessions = False

# Listen on all interfaces, since hub should be reachable from spawned nodes
c.JupyterHub.hub_ip = '0.0.0.0'

c.JupyterHub.spawner_class = SlurmSpawner
c.SlurmSpawner.default_url = '/lab'

# default values for batch spawner
c.SlurmSpawner.req_memory = '1' # GB
c.SlurmSpawner.req_nprocs = '1'
c.SlurmSpawner.req_prologue = '''
# ensure user has link to shared directory
if [ ! -L "$HOME/share" ]; then
  ln -s /home/share "$HOME/share"
fi

export PATH={{ miniforge.home }}/condabin:{{ miniforge.home }}/envs/{{ jupyterhub.lab_environment }}/bin:$PATH
'''

{% raw %}
c.SlurmSpawner.batch_script = """#!/bin/bash
#SBATCH --output={{homedir}}/.jupyterhub_slurmspawner_%j.log
#SBATCH --error={{homedir}}/.jupyterhub_slurmspawner_%j.log
#SBATCH --job-name=spawner-jupyterhub
#SBATCH --chdir={{homedir}}
#SBATCH --export={{keepvars}}
#SBATCH --get-user-env=L
{% if partition  %}#SBATCH --partition={{partition}}
{% endif %}{% if runtime    %}#SBATCH --time={{runtime}}
{% endif %}{% if memory     %}#SBATCH --mem={{memory}}G
{% endif %}{% if gres       %}#SBATCH --gres={{gres}}
{% endif %}{% if nprocs     %}#SBATCH --cpus-per-task={{nprocs}}
{% endif %}{% if reservation%}#SBATCH --reservation={{reservation}}
{% endif %}{% if options    %}#SBATCH {{options}}{% endif %}
set -euo pipefail
trap 'echo SIGTERM received' TERM
{{prologue}}
which jupyterhub-singleuser
echo "running command {{cmd}}"
{% if srun %}{{srun}} {% endif %}{{cmd}}
echo "jupyterhub-singleuser ended gracefully"
{{epilogue}}
"""
{% endraw %}

# data from form submission is {key: [value]}
# we need to convert the formdata to a key value dict
def handle_form_data_options(data):
    return {key: value[0] for key, value in data.items()}

c.SlurmSpawner.options_from_form = handle_form_data_options

c.SlurmSpawner.options_form = '''
<div class="form-group row">
  <label for="memory" class="col-2 col-form-label">JupyterLab Memory (GB)</label>
  <div class="col-10">
    <input class="form-control" type="number" value="1" id="memory" name="memory">
  </div>
</div>
<div class="form-group row">
  <label for="nprocs" class="col-2 col-form-label">JupyterLab CPUs</label>
  <div class="col-10">
    <input class="form-control" type="number" value="1" id="nprocs" name="nprocs">
  </div>
</div>
<div class="form-group row">
  <label for="partition" class="col-2 col-form-label">Slurm Partition</label>
  <div class="col-10">
     <select class="form-select" aria-label="Slurm Queue" id="partition" name="partition">
       <option value="general">general</option>
{% for item in groups %}
{% if item.startswith('partition-')%}
       <option value="{{ item[10:] }}">{{ item[10:] }}</option>
{% endif %}
{% endfor %}
     </select>
  </div>
</div>
'''

# ===== adding api tokens for external services =======
c.JupyterHub.services = [
{% for service_name in jupyterhub.services %}
   {
      'name': "{{ service_name }}",
      'api_token': "{{ jupyterhub.services[service_name] }}",
      'admin': True
   },
{% endfor %}
]

#==================== THEMING =====================#
import tornado.web
import qhub_jupyterhub_theme

c.JupyterHub.extra_handlers = [
    (r'/custom/(.*)', tornado.web.StaticFileHandler, {"path": qhub_jupyterhub_theme.STATIC_PATH}),
]

c.JupyterHub.template_paths = [
    qhub_jupyterhub_theme.TEMPLATE_PATH
]

c.JupyterHub.template_vars = {
{% for key, value in jupyterhub.template_vars.items() %}
    '{{ key }}': '{{ value }}',
{% endfor %}
}

##
## This file is maintained by Ansible - ALL MODIFICATIONS WILL BE REVERTED
## https://jupyterhub.readthedocs.io/en/stable/getting-started/config-basics.html
##
import subprocess
import json
import os

from jupyterhub_traefik_proxy import TraefikTomlProxy
from batchspawner import SlurmSpawner
from traitlets import Unicode, Callable
# Find all conda environments that have dask jupyterlab, batchspawner, and jupyterhub installed
jupyterlab_packages = ['jupyterlab', 'batchspawner', 'jupyterhub']
def conda_envs_w_packages(packages, names_only=False):
    _environments = []
    output = subprocess.check_output(['conda', 'env', 'list', '--json'])
    environments = json.loads(output)['envs']
    for environment in environments:
        output = subprocess.check_output(['conda', 'list', '-p', environment, '--json'])
        if set(packages)  <= {_['name'] for _ in json.loads(output)}:
            _environments.append((os.path.basename(environment), environment))
    if names_only:
        return [env_name for env_name, path in _environments]
    return _environments


# JupyterHub base url
c.JupyterHub.base_url = '{{ jupyterhub.base_url }}'

# Don't kill servers when JupyterHub restarts
c.JupyterHub.cleanup_servers = False

# Turn sessions off - we don't use them, since we pass through to slurm
c.PAMAuthenticator.open_sessions = False

# Listen on all interfaces, since hub should be reachable from spawned nodes
c.JupyterHub.hub_ip = '0.0.0.0'

# Assign Qhub Spawner
class QHubHPCSpawner(SlurmSpawner):
    req_conda_environment_prefix = Unicode('',
        help="Conda environment prefix to launch jupyterlab"
    ).tag(config=True)

c.JupyterHub.template_paths = []
c.JupyterHub.extra_handlers = []

{% if cdsdashboards.enabled %}
# -------------------- Specify Dashboard Instance Size --------------------
# There will likely be a better way to specify instance size when https://github.com/ideonate/cdsdashboards/issues/58 is resolved.
# c.JupyterHub.template_paths += ['/etc/jupyterhub/cdsdashboards/templates']

import sys, re

from tornado.web import authenticated

from jupyterhub.handlers.base import BaseHandler
from jupyterhub.orm import Group, User

from cdsdashboards.orm import Dashboard
from cdsdashboards.hubextension.base import DashboardBaseMixin, check_database_upgrade, spawner_to_dict
from cdsdashboards.util import DefaultObjDict, url_path_join, maybe_future

from cdsdashboards import hookimpl
from cdsdashboards.pluggymanager import pm
from cdsdashboards.app import BuildersStore, CDSConfigStore

from cdsdashboards.builder.processbuilder import ProcessBuilder
class QHubBuilder(ProcessBuilder):
    _needs_user_options = True
    
#    async def prespawn_server_options(self, dashboard, dashboard_user, ns):
#        result = {}
#        for spawn_attr in ['memory', 'nprocs', 'partition']:
#            if dashboard.options.get(spawn_attr):
#                result.update([(spawn_attr, dashboard.options[spawn_attr])])
#        return result
# --------------------End of Specify Dashboard Instance Size --------------------


from cdsdashboards.app import CDS_TEMPLATE_PATHS
from cdsdashboards.hubextension import cds_extra_handlers
from cdsdashboards.hubextension.spawners.variablemixin import VariableMixin, MetaVariableMixin

dashboard_packages = ['cdsdashboards-singleuser']

class QHubHPCSpawner(QHubHPCSpawner, VariableMixin, metaclass=MetaVariableMixin):
    pass

c.VariableMixin.default_presentation_cmd = ['jhsingle-native-proxy']
c.JupyterHub.allow_named_servers = True

c.CDSDashboardsConfig.builder_class = QHubBuilder  #'cdsdashboards.builder.processbuilder.ProcessBuilder'

c.JupyterHub.template_paths += CDS_TEMPLATE_PATHS
c.JupyterHub.extra_handlers += cds_extra_handlers
# dashboards_new_index = [handler[0] for handler in c.JupyterHub.extra_handlers].index(r'dashboards-new')
# c.JupyterHub.extra_handlers[dashboards_new_index] = (r'dashboards-new', QhubDashboardEditHandler)
c.CDSDashboardsConfig.conda_envs = conda_envs_w_packages(jupyterlab_packages + dashboard_packages, names_only=True) 

{% endif %}
c.JupyterHub.spawner_class = QHubHPCSpawner

c.SlurmSpawner.start_timeout = {{ jupyterhub.spawner.start_timeout }}
c.QHubHPCSpawner.default_url = '/lab'

# default values for batch spawner
c.QHubHPCSpawner.req_memory = '1' # GB
c.QHubHPCSpawner.req_nprocs = '1'
c.QHubHPCSpawner.req_conda_environment_prefix = '{{ miniforge.home }}/envs/{{ jupyterhub.lab_environment }}'
c.QHubHPCSpawner.req_prologue = '''
# ensure user has link to shared directory
if [ ! -L "$HOME/share" ]; then
  ln -s /home/share "$HOME/share"
fi

export PATH={{ miniforge.home }}/condabin:$PATH
'''


c.QHubHPCSpawner.batch_script = """#!/bin/bash
{% raw %}
#SBATCH --output={{homedir}}/.jupyterhub_slurmspawner_%j.log
#SBATCH --error={{homedir}}/.jupyterhub_slurmspawner_%j.log
#SBATCH --job-name=spawner-jupyterhub
#SBATCH --chdir={{homedir}}
#SBATCH --export={{keepvars}}
#SBATCH --get-user-env=L
{% if partition  %}#SBATCH --partition={{partition}}
{% endif %}{% if runtime    %}#SBATCH --time={{runtime}}
{% endif %}{% if memory     %}#SBATCH --mem={{memory}}G
{% endif %}{% if gres       %}#SBATCH --gres={{gres}}
{% endif %}{% if nprocs     %}#SBATCH --cpus-per-task={{nprocs}}
{% endif %}{% if reservation%}#SBATCH --reservation={{reservation}}
{% endif %}{% if options    %}#SBATCH {{options}}{% endif %}
set -euo pipefail
trap 'echo SIGTERM received' TERM
{{prologue}}
{% endraw %}

{% if cdsdashboards.enabled %}
# Overwrite conda_environment_prefix when using cdsdashboards
if [ -n '{{ '{{ conda_env }}' }}' ]; then
    export PATH={{miniforge.home}}/envs/{{ '{{ conda_env }}' }}/bin:$PATH
else
    export PATH={{ '{{ conda_environment_prefix }}' }}/bin:$PATH
fi
{% else %}
export PATH={{ '{{ conda_environment_prefix }}' }}/bin:$PATH
{% endif %}

{% raw %}
which jupyterhub-singleuser
echo "running command {{cmd}}"
{% if srun %}{{srun}} {% endif %}{{cmd}}
echo "jupyterhub-singleuser ended gracefully"
{{epilogue}}
"""
{% endraw %}


# data from form submission is {key: [value]}
# we need to convert the formdata to a key value dict
def handle_form_data_options(data):
    return {key: value[0] for key, value in data.items()}

c.QHubHPCSpawner.options_from_form = handle_form_data_options

c.QHubHPCSpawner.options_form = f'''
<div class="form-group row">
  <label for="memory" class="col-2 col-form-label">JupyterLab Memory (GB)</label>
  <div class="col-10">
    <input class="form-control" type="number" value="1" id="memory" name="memory">
  </div>
</div>
<div class="form-group row">
  <label for="nprocs" class="col-2 col-form-label">JupyterLab CPUs</label>
  <div class="col-10">
    <input class="form-control" type="number" value="1" id="nprocs" name="nprocs">
  </div>
</div>
<div class="form-group row">
  <label for="partition" class="col-2 col-form-label">Slurm Partition</label>
  <div class="col-10">
     <select class="form-select" aria-label="Slurm Queue" id="partition" name="partition">
       <option value="general">general</option>
{% for item in groups %}
{% if item.startswith('partition-')%}
       <option value="{{ item[10:] }}">{{ item[10:] }}</option>
{% endif %}
{% endfor %}
     </select>
  </div>
</div>
{% raw %}
<div class="form-group row">
  <label for="conda_environment_prefix" class="col-2 col-form-label">Conda Environment</label>
  <div class="col-10">
     <select class="form-select" aria-label="Conda Environment" id="conda_environment_prefix" name="conda_environment_prefix">
{''.join([f'<option value="{_[1]}">{_[0]}</option>' for _ in conda_envs_w_packages(jupyterlab_packages)])}
     </select>
  </div>
</div>
{% endraw %}
'''

# ===== adding api tokens for external services =======
c.JupyterHub.services = [
{% for service_name in jupyterhub.services %}
   {
      'name': "{{ service_name }}",
      'api_token': "{{ jupyterhub.services[service_name] }}",
      'admin': True
   },
{% endfor %}
]

#==================== THEMING =====================#
import tornado.web
import qhub_jupyterhub_theme

c.JupyterHub.extra_handlers = [
    (r'/custom/(.*)', tornado.web.StaticFileHandler, {"path": qhub_jupyterhub_theme.STATIC_PATH}),
] + c.JupyterHub.extra_handlers

c.JupyterHub.template_paths += [
    qhub_jupyterhub_theme.TEMPLATE_PATH
]

c.JupyterHub.template_vars = {
{% for key, value in jupyterhub.template_vars.items() %}
    '{{ key }}': '{{ value }}',
{% endfor %}
}
